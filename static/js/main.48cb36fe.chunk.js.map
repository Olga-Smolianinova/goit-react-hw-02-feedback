{"version":3,"sources":["components/Feedback/Feedback.module.css","components/Feedback/Section/Section.js","components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Statistics/Statistics.js","components/Feedback/Notification/Notification.js","components/Feedback/Feedback.js","App.js","index.js","components/Feedback/FeedbackOptions/FeedbackOptions.module.css"],"names":["module","exports","Section","title","children","className","FeedbackOptions","options","onLeaveFeedback","buttons","Object","keys","map","button","type","onClick","s","Feedback__btn","toUpperCase","slice","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","Feedback","state","countFeedback","event","btnName","target","textContent","toLowerCase","setState","prevState","key","this","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,SAAW,6B,0ICiBdC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASC,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,SAAuBF,IACtBC,M,gBCwBQE,EA1BS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAE5BC,EAAUC,OAAOC,KAAKJ,GAE5B,OACE,mCACGE,EAAQG,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SAELC,QAASP,EACTH,UAAWW,IAAEC,cAJf,SAOGJ,EAAOK,cAAcC,MAAM,EAAG,GAAKN,EAAOM,MAAM,IAL5CN,SCQAO,EAnBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KAEV,yCAAYC,EAAZ,OACA,qDAAwBC,EAAxB,WCCWC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,K,iBCiGEC,E,4MAjFbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAIPO,cAAgB,SAAAC,GACd,IAAMC,EAAUD,EAAME,OAAOC,YAAYC,cAEzC,EAAKC,UAAS,SAAAC,GAEZ,IAAK,IAAMC,KAAOD,EAChB,GAAIC,IAAQN,EACV,OAAO,eAAGM,EAAMD,EAAUC,GAAO,O,4CAsBzC,WAAS,MAEwBC,KAAKV,MAA5BR,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,IAIjBiB,EAAqBnB,EAAOC,EAAUC,EAGtCkB,EAAkCC,KAAKC,MACnC,IAAPtB,EAAcmB,GAGjB,OACE,sBAAKnC,UAAWW,IAAEY,SAAlB,UAGE,cAAC,EAAD,CAASzB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEI,QAASgC,KAAKV,MACdrB,gBAAiB+B,KAAKT,kBAM1B,cAAC,EAAD,CAAS3B,MAAM,aAAf,SAE0B,IAAvBqC,EACC,cAAC,EAAD,CACEnB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,EACPf,mBAAoBgB,IAGtB,cAAC,EAAD,CAAcd,QAAQ,+B,GAhFXiB,aCSRC,E,4JAbb,WACE,OACE,8BAEE,cAAC,EAAD,U,GALUD,a,YCDlBE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCX1BlD,EAAOC,QAAU,CAAC,cAAgB,0C","file":"static/js/main.48cb36fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Feedback\":\"Feedback_Feedback__W_LlT\"};","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className=\"Section\">\r\n      <h2 className=\"Title\">{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  // т.к. state - объект, обработаем его с помощью метода Object.keys, и далее ключи выведем с помощью map\r\n  const buttons = Object.keys(options);\r\n\r\n  return (\r\n    <>\r\n      {buttons.map(button => (\r\n        <button\r\n          type=\"button\"\r\n          key={button}\r\n          onClick={onLeaveFeedback}\r\n          className={s.Feedback__btn}\r\n        >\r\n          {/*рендерим button, приведя сначала к  Заглавной букве название кнопки */}\r\n          {button.toUpperCase().slice(0, 1) + button.slice(1)}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <ul>\r\n    <li>Good: {good}</li>\r\n    <li>Neutral: {neutral}</li>\r\n    <li>Bad: {bad}</li>\r\n\r\n    <li>Total: {total} </li>\r\n    <li>Positive feedback: {positivePercentage}%</li>\r\n  </ul>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\n\r\n//Components\r\nimport Section from './Section'; //for title\r\n\r\nimport FeedbackOptions from './FeedbackOptions';\r\n\r\nimport Statistics from './Statistics';\r\n\r\nimport Notification from './Notification';\r\n\r\n// Styles\r\nimport s from './Feedback.module.css';\r\n\r\nclass Feedback extends Component {\r\n  // static defaultProps = {\r\n  //   value: this.defaultProps.value,\r\n  // };\r\n\r\n  // static propTypes ={}\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  // методы\r\n  countFeedback = event => {\r\n    const btnName = event.target.textContent.toLowerCase();\r\n\r\n    this.setState(prevState => {\r\n      // перебираем this.state. Если в переборе ключ и имя кнопки (приведенное к нижнему регистру) совпадает, то значение ключа +1\r\n      for (const key in prevState) {\r\n        if (key === btnName) {\r\n          return { [key]: prevState[key] + 1 };\r\n        }\r\n      }\r\n      // вариант 2 - тоже самое через распыление\r\n      // ...prevState,\r\n      // ...{\r\n      //   [btnName]:\r\n      //     prevState[btnName] + 1,\r\n      // },\r\n    });\r\n  };\r\n\r\n  // метод для расчета общего количества отзывов (total). Для использования этого способа в render() прописываем totalFeedback=this.countTotalFeedback()\r\n\r\n  // countTotalFeedback = () => {\r\n  //   const values = Object.values(this.state);\r\n  //   console.log(values);\r\n  //   const totalFeedback = values.reduce((acc, value) => acc + value, 0);\r\n  //   return totalFeedback;\r\n  // };\r\n\r\n  // render\r\n  render() {\r\n    // для оптимизации кода деструктуризируем свойства state,чтобы каждый раз не писать this.state в Statistics\r\n    const { good, neutral, bad } = this.state;\r\n    // console.log(this.state);\r\n\r\n    // для расчета общего количества отзывов (total)\r\n    const countTotalFeedback = good + neutral + bad;\r\n\r\n    // для расчета % положительных отзывов\r\n    const countPositiveFeedbackPercentage = Math.round(\r\n      (good * 100) / countTotalFeedback,\r\n    );\r\n\r\n    return (\r\n      <div className={s.Feedback}>\r\n        {/*1. title выносим в отдельный component \r\n        /* 2.  внутрь Section рендерим и вставляем часть кода из ./FeedbackOptions.js */}\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={this.state}\r\n            onLeaveFeedback={this.countFeedback}\r\n          />\r\n        </Section>\r\n\r\n        {/*3. title выносим в отдельный component\r\n        4. внутрь Section рендерим и вставляем часть кода из ./Statistics.js */}\r\n        <Section title=\"Statistics\">\r\n          {/* рендер по условию: если есть хотя бы 1 отзыв выведи всю статистику, в обратном случае - надпись No feedback given' */}\r\n          {countTotalFeedback !== 0 ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={countTotalFeedback}\r\n              positivePercentage={countPositiveFeedbackPercentage}\r\n            />\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import React, { Component } from 'react';\n\n// Components\nimport Feedback from './components/Feedback';\n\n// import Draft from './components/Draft'; // для тренировки теории модуля\n\n// Styles\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        {/* Home work */}\n        <Feedback />\n\n        {/* для тренировки теории по модулю components//Draft/Draft.js */}\n        {/* <Draft /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nimport 'modern-normalize/modern-normalize.css'; //подключение стилей для normalize\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Feedback__btn\":\"FeedbackOptions_Feedback__btn__3FLYl\"};"],"sourceRoot":""}